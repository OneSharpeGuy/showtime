<?php
/**
* @file
* Install, update and uninstall functions for the osg_recent_activity module.
*/


/**
* Implements hook_install().
*/
function osg_recent_activity_install() {



  //drupal_set_message('osg_recent_activity_install');

}


/**
* Implements hook_uninstall().
*/
function osg_recent_activity_uninstall() {

    //Remove All variables belonging to this module
    $result = db_query("select name as variable_name from variable where name like 'osg_recent_activity_%'");
    foreach ($result as $record)
    {
        variable_del($record->variable_name);
    }
}


/**
*
* Implements hook_schema()
*
* Define the current version of the database schema.
*
* A Drupal schema definition is an array structure representing one or
* more tables and their related keys and indexes. A schema is defined by
* hook_schema() which must live in your module's .install file.
*
* This hook is called at install and uninstall time, and in the latter
* case, it cannot rely on the .module file being loaded or hooks being known.
* If the .module file is needed, it may be loaded with drupal_load().
*
* The tables declared by this hook will be automatically created when
* the module is first enabled, and removed when the module is uninstalled.
* This happens before hook_install() is invoked, and after hook_uninstall()
* is invoked, respectively.
*
* By declaring the tables used by your module via an implementation of
* hook_schema(), these tables will be available on all supported database
* engines. You don't have to deal with the different SQL dialects for table
* creation and alteration of the supported database engines.
*
* See the Schema API Handbook at http://drupal.org/node/146843 for
* details on schema definition structures.
*
* @return
* A schema definition structure array. For each element of the
* array, the key is a table name and the value is a table structure
* definition.
*
* @ingroup schemaapi
*/

function osg_recent_activity_schema() {

  //drupal_set_message('osg_recent_activity_schema');
  $schema['osg_node_daycount'] = array(
    'description'=> 'History for node_counter',
    'fields'      => array(
      'id'           => array(
        'description'=> 'IDENTITY value',
        'type'       => 'serial',
        'unsigned'   => TRUE,
        'not null'   => TRUE,
      ),
      'nid'          => array(
        'description'=> 'Node ID',
        'type'       => 'int',
        'not null'   => TRUE,
      ),
      'uid'          => array(
        'description'=> 'UID of user that viewed the node',
        'type'       => 'int',
        'not null'   => TRUE,
      ),
      'start_of_day' => array(
        'description'=> 'UnixStartTime for First Minute of a new day',
        'type'       => 'int',
        'not null'   => TRUE,
      ),
      'daycount'     => array(
        'description'=> 'number of times node is visited in a day',
        'type'       => 'int',
        'not null'   => TRUE,
      ),
      'touchtime'    => array(
        'description'=> 'last time node was viewed in given day',
        'type'       => 'int',
        'not null'   => TRUE,
      ),
    ),
    'indexes'     => array(
      'nodes_by_day' => array('nid','start_of_day'),
    ),
    'primary key' => array('id'),
  );
  return $schema;

}
