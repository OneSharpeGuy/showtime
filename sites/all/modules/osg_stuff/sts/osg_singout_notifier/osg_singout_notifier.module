<?php

/**
 * @file
 * Example of how to use Drupal's mail API.
 */

require_once 'osg_singout_notifier.blocks.inc';
/**
 * @defgroup osg_singout_notifier Example: Email
 * @ingroup examples
 * @{
 * Example of how to use Drupal's mail API.
 *
 * This example module provides two different examples of the Drupal email API:
 * - Defines a simple contact form and shows how to use drupal_mail()
 * to send an e-mail (defined in hook_mail()) when the form is submitted.
 * - Shows how modules can alter emails defined by other Drupal modules or
 * Core using hook_mail_alter by attaching a custom signature before
 * they are sent.
 */

function osg_singout_notifier_mail($key, &$message, $params)
{
    global $user;
    //debug($params,'$params',true);
    // Each message is associated with a language,which may or may not be the
    // current user's selected language,depending on the type of e - mail being
    // sent. This $options array is used later in the t() calls for subject
    // and body to ensure the proper translation takes effect.
    $options = array('langcode' => $message['language']->language, );
    //debug($key,'$key');
    //debug($params,'$params');
    switch ($key)
    {
            // Send a simple message from the contact form.
        case 'contact_message':
            $message['subject'] = t('E-mail sent from @site-name', array('@site-name' =>
                    variable_get('site_name', 'Drupal')), $options);
            // Note that the message body is an array,not a string.
            $message['body'][] = t('@name sent you the following message:',
                array('@name' => $user->name), $options);
            // Because this is just user - entered text,we do not need to translate it.

            // Since user - entered text may have unintentional HTML entities in it like
            // ' < ' or ' > ',we need to make sure these entities are properly escaped,
            // as the body will later be transformed from HTML to text,meaning
            // that a normal use of ' < ' will result in truncation of the message.
            $message['body'][] = check_plain($params['message']);
            break;
        case 'osg_singout_notifier_registration_needed':
            $message['body'] = $params['body'];
            $message['subject'] = check_plain($params['subject']);
            $message['headers']['Content-Type'] = $params['headers']['Content-Type'];
            $message['headers']['Reply-To'] = $params['headers']['Reply-To'];
            $bcc = variable_get('osg_singout_notifier_bcc');
            if (is_array($bcc))
            {
                if (count($bcc) > 0)
                {
                    $params['headers']['Bcc'] = implode(',', $bcc);
                }
            }
            break;

    }
    // debug($message,"MESSAGE");


}


/*
///// Supporting functions ////

/**
* Implement hook_menu().
*
* Set up a page with an e-mail contact form on it.
*/
function osg_singout_notifier_menu()
{
    global $base_url;
    $items['osg/singout/notifier/contact'] = array(
        'title' => 'STS Singout Notifier: contact form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('osg_singout_notifier_form'),
        'access arguments' => array('access content'),
        );
    $items['osg/singout/notifier/blast/alpha'] = array(
        //'type' => MENU_CALLBACK,
        'title' => 'STS Singout Notifier: Send Registration Needed Blast',
        'page callback' => 'osg_singout_notifier_registration_needed',
        //'access callback' => true,

        );

    $items['admin/config/osg/singout/notifier_unregistered_form'] = array(
        'title' => 'STS Singout Notifier: Email Blast Parameters',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('osg_singout_notifier_blast_unregistered_form'),
        //'access callback'=>TRUE,
        'access arguments' => array('administer site configuration'),
        'weight' => 500,

        );
    $items['admin/config/osg/singout/notifier_cron_form'] = array(
        'title' => 'STS Singout Notifier: Email Blast Config Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('osg_singout_notifier_config_form'),
        //'access callback'=>TRUE,
        'access arguments' => array('administer site configuration'),
        'weight' => 500,

        );
    $items['user/%user/osg/notify/response_needed'] = array(
        'title' => 'Notifiy',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'osg_singout_notifier_registration_needed',
        'page arguments' => array('user/%uid', 1),
        'access callback' => 'osg_singout_notifier_user_access',
        'access arguments' => array(1),
        'weight' => 100,
        );

    return $items;
}

function osg_singout_notifier_blast_unregistered_form($form, &$form_state)
{


    $form['markup'] = array('#markup' => t('Define parameters for non-respondant email blast'), );
    $form['osg_singout_notifier_blast_unregistered_subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#required' => true,
        '#size' => 128,
        '#desciption' => t('Subject of non-respondant email blast unregistered'),
        '#default_value' => variable_get('osg_singout_notifier_blast_unregistered_subject',
            'Upcoming STS Performances'),
        );
    $default = 'The following is a list of upcoming ShowTime Performances for which you have not responded. ' .
        'Please log onto <a href="[site:url]">[site:name]</a> and indicate your attendance plan.';
    $form['osg_singout_notifier_blast_unregistered_message_before'] = array(
        '#type' => 'textarea',
        '#title' => t('Message (before listing)'),
        '#description' => t('Text of email (before list of unregistered performances).'),
        '#default_value' => variable_get('osg_singout_notifier_blast_unregistered_message_before',
            $default),
        '#required' => true,
        );
    $form['osg_singout_notifier_blast_unregistered_message_after'] = array(
        '#type' => 'textarea',
        '#title' => t('Addtional Message'),
        '#description' => t('Text of email (after the list of unregistered performances).'),
        '#default_value' => variable_get('osg_singout_notifier_blast_unregistered_message_after'),
        );
    return system_settings_form($form);
}
/**
 * The contact form.
 */
function osg_singout_notifier_form()
{
    $form['intro'] = array('#markup' => t('Use this form to send a message to an e-mail address. No spamming!'), );
    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail address'),
        '#required' => true,
        );
    $form['message'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#required' => true,
        );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        );

    return $form;
}

/**
 * Form validation logic for the contact form.
 */
function osg_singout_notifier_form_validate($form, &$form_state)
{
    if (!valid_email_address($form_state['values']['email']))
    {
        form_set_error('email', t('That e-mail address is not valid.'));
    }
}

/**
 * Form submission logic for the contact form.
 */
function osg_singout_notifier_form_submit($form, &$form_state)
{
    osg_singout_notifier_mail_send($form_state['values']);
}
/**
 * @} End of "defgroup osg_singout_notifier".
 */
function osg_singout_notifier_send_now()
{
    global $base_url;
    osg_singout_notifier_registration_needed($base_url .
        "/admin/config/singout/notifier_cron_form");
}
function osg_singout_notifier_registration_needed($nav = null, $user = null)
{
    unset($_SESSION['osg_notifier_associations']);
    if (strpos($nav, "%uid"))
    {
        if (is_object($user))
        {
            if (isset($user->uid))
            {
                $nav = str_replace("%uid", $user->uid, $nav);
            }
        }

    }
    osg_auto_register_housekeeping();

    $re_notify = variable_get('osg_singout_notifier_renotify', 86400 * 7);
    $nag_boundary = variable_get('osg_singout_notifier_nag_boundary', 86400 * 30) +
        time();

    $subquery_j = db_select('osg_singout_notifier_journal', 'j');
    $subquery_j->fields('j', array(
        'id',
        'nid',
        'uid'));
    $subquery_j->addExpression('COALESCE(last_notification_time,initial_notification_time)',
        'notification_time,');
    $subquery_j->addExpression('UNIX_TIMESTAMP()- COALESCE(last_notification_time,initial_notification_time)',
        'lag_time');

    $subquery_i = db_select('osg_ical_imported', 'i');
    $subquery_i->fields('i', array(
        'nid',
        'available',
        'start_time_unix',
        'location'));
    $subquery_i->addField('i', 'title', 'venue');
    $subquery_i->addExpression(' FLOOR(start_time_unix/86400) - FLOOR(UNIX_TIMESTAMP()/86400)',
        'days_until');

    $lag_time = $re_notify;
    $query = db_select('osg_registration_ext', 'x');
    $query->join($subquery_i, 'i', 'x.nid=i.nid AND i.available=1');
    //osg_users u ON x.uid = u.uid
    $query->join('osg_users', 'u',
        'x.uid=u.uid AND u.is_member=1 AND u.is_singer=1');
    $query->join('node', 'n', 'i.nid=n.nid AND n.status=1');
    $query->leftJoin($subquery_j, 'j',
        'j.nid=i.nid AND j.uid=u.uid AND j.uid=u.uid');

    $query->fields('i', array(
        'start_time_unix',
        'location',
        'venue',
        'days_until'));
    $query->fields('n', array('title', 'nid'));
    $query->fields('u', array(
        'uid',
        'user_name',
        'mail',
        'last_name',
        'first_name'));

    $query->fields('j', array('notification_time', 'lag_time'));

    $query->isNull('x.state');
    //$query->where('COALESCE(UNIX_TIMESTAMP() - notification_time,:re_notify) >= :re_notify',array(':re_notify',$re_notify));
    $query->condition(db_or()->isNull('j.id')->where('j.lag_time>:lag_time',
        array(':lag_time' => $lag_time)));
    $query->where('i.start_time_unix BETWEEN UNIX_TIMESTAMP() AND :nag_boundary',
        array(':nag_boundary' => $nag_boundary));
    $query->orderBy('n.uid');
    $query->orderBy('i.start_time_unix');

    //drupal_set_message((string )$query);

    $result = $query->execute();
    $hold_record = array();

    $status = _get_test_status();
    //debug($status);

    $heading = array();
    $heading[] = 'Event';
    $heading[] = array(
        'data' => 'Date',
        'colspan' => 2,
        );
    $heading[] = array(
        'data' => 'Time',
        'colspan' => 2,
        );

    $rows = array();
    $column = array();
    $lines = array();
    $lines[0] = "";
    $key = __function__;
    $block = array();
    //debug(variable_get('osg_singout_notifier_bcc'));
    if ($result->rowCount() > 0)
    {
        $bcc = variable_get('osg_singout_notifier_bcc');
        while ($record = $result->fetchAssoc())
        {
            //debug($record);
            // Do something with:
            // $record['name']
            // $record['quantity']

            if (isset($hold_record['uid']))
            {

                if ($hold_record['uid'] <> $record['uid'])
                {

                    //osg_singout_notifier_prep_message($hold_record, array('header' =>$heading, 'rows' => $rows), $key, $status, $bcc);
                    $data = implode("<br>\n", $block);
                    $block = array();
                    osg_singout_notifier_prep_message($hold_record, $data, $key,
                        $status, $bcc);
                    $lines = array();
                    $lines[0] = "";
                    $rows = array();
                }
            }

            /**
             *  $lines[] = $record['title'] . "\t" . date('l, F jS Y', $record['start_time_unix']) .
             *                 "\t" . date('h:i A', $record['start_time_unix']);
             *             $column = array();
             *             $options = array('span' => array('class' => 'registration_needed'));
             *             $column[] = osg_api_node_link($record['nid'], $record['title'], $options);
             *             $column[] = '&nbsp;';
             *             $column[] = osg_api_get_local_date($record['start_time_unix'],
             *                 'l, F jS, Y');
             *             $column[] = '&nbsp;';
             *             $column[] = osg_api_get_local_date($record['start_time_unix'],
             *                 'h:i a');
             *             $rows[] = $column;
             */

            $block[] = osg_auto_register_build_request($record['uid'], $record['nid']);
            //debug($record);
            if (!is_array($status))
            {
                osg_singout_notifier_log($record, $key);
            }

            $hold_record = $record;
        }
        if (count($block))
        {
            //osg_singout_notifier_prep_message($hold_record, array('header' => $heading,'rows' => $rows), $key, $status, $bcc);
            $data = implode("<br>\n", $block);
            osg_singout_notifier_prep_message($hold_record, $data, $key, $status,
                $bcc);
        }

    }

    variable_set('osg_singout_notifier_next_execution', time() + variable_get('osg_singout_notifier_interval',
        604800));

    if (is_null($nav))
    {
        $nav = $_SERVER['HTTP_REFERER'];
    }
    if ($nav == 'osg/singout/notifier/blast/alpha')
    {
        $nav = "";
    }
    if ($nav == "")
    {
        $nav = "<front>";
    }
    //debug($nav);
    unset($_SESSION['osg_notifier_associations']);
    drupal_goto($nav);
}
function osg_singout_notifier_roll_status(&$status, &$record, &$send_mail)
{
    if (is_array($status))
    {
        if (count($status['recipient']))
        {

            $record['mail'] = osg_api_pop_value($status['recipient'], true);
            $send_mail = true;
        }
        else
        {
            $send_mail = false;
        }

    }

}
/*
$message: An array containing the message data. Keys in this array include:

'id': The drupal_mail() id of the message. Look at module source code or drupal_mail() for possible id values.
'to': The address or addresses the message will be sent to. The formatting of this string will be validated with the
PHP e-mail validation filter.
'from': The address the message will be marked as being from,which is either a custom address or the site-wide
default email address.
'subject': Subject of the email to be sent. This must not contain any newline characters,or the email may not be sent properly.
'body': An array of strings containing the message text. The message body is created by concatenating the individual
array strings into a single text string using "\n\n" as a separator.
'headers': Associative array containing mail headers,such as From,Sender,MIME-Version,Content-Type,etc.
'params': An array of optional parameters supplied by the caller of drupal_mail()
that is used to build the message before hook_mail_alter() is invoked.
'language': The language object used to build the message before hook_mail_alter() is invoked.
'send': Set to FALSE to abort sending this email message.
*/
function osg_singout_notifier_prep_message($info, $data, $key, &$status, $bcc =
    array())
{
    global $base_url;
    //debug($data,'$data');

    $message = array();
    //$separator = md5(time());
    // carriage return type (we use a PHP end of line constant)
    //$eol = PHP_EOL;

    ////$params['to'] = $record['email'];
    $send_mail = true; //(bool) (strpos($info['mail'],'@example.com') == 0);
    if (is_array($status))
    {
        if (count($status['recipient']))
        {
            $info['mail'] = osg_api_pop_value($status['recipient'], 2);
            $send_mail = true;
        }
        else
        {
            $send_mail = false;
        }

    }

    $recipient = $info['first_name'] . ' ' . $info['last_name'] . '<' . $info['mail'] .
        '>';
    drupal_set_message("Mail sent to " . $recipient);
    $sender = variable_get('site_mail', 'admin@example.com');
    $split = explode('@', $sender);
    $message['headers']['Reply-To'] = 'no-reply@' . $split[1];
    $message['subject'] = token_replace(variable_get('osg_singout_notifier_blast_unregistered_subject',
        'Upcoming ShowTime Event'));
    $jabber = variable_get('osg_singout_notifier_blast_unregistered_message_before',
        'Please log onto [site:name] and register for the following');

    //$body = $jabber . "\n < br > \n" . theme('table', $data);
    $body = $jabber . "\n<br>\n" . $data;
    $jabber = variable_get('osg_singout_notifier_blast_unregistered_message_after',
        '');
    if ($jabber > '')
    {
        $body = $body . "<br>" . $jabber;
    }
    if (!empty($_SESSION['osg_notifier_associations'][$info['nid']][$info['uid']]['expiry']))
    {
        $expiry = $_SESSION['osg_notifier_associations'][$info['nid']][$info['uid']]['expiry'];
        $expiry = "<p><i>The auto-registration links in this message will expire on " .
            date('l, F j, Y \a\t g:i a', $expiry) . "</i></p>";
        $body = $body . $expiry;
    }

    $nag_boundary = floor(variable_get('osg_singout_notifier_nag_boundary',
        10368000) / 86400);
    $body = str_replace('[nag boundary]', $nag_boundary, $body);
    //debug($info);
    $user = user_load($info['uid']);
    $body = token_replace($body, (array )$user);

    $body = str_replace('[user:mail]', $info['mail'], $body);
    $body = str_replace('[user:name]', $info['user_name'], $body);

    $message['body']['html'] = $body;
    $message['headers']['Content-Type'] =
        'text/html; charset=UTF-8; format=flowed; delsp=yes';
    //debug($message,'$message');
    //drupal_mail($module,$key,$to,$language,$params = array(),$from = NULL,$send = TRUE)


    drupal_mail('osg_singout_notifier', $key, $recipient, language_default(), $message,
        $sender, $send_mail);
    /**
     *  debug(array(
     *         $recipient,
     *         $sender,
     *         $send_mail));
     */
    //debug($message,'$message');
    //drupal_set_message($body);
}

/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *

 */
function osg_singout_notifier_cron()
{
    $interval = variable_get('osg_singout_notifier_interval', 604800);
    if ((!is_null($interval)) && is_numeric($interval) && ($interval > 0))
    {
        drupal_set_message('osg_singout_notifier_cron');
        // We usually don't want to act every time cron runs (which could be every
        // minute) so keep a time for the next run in a variable.
        //variable_del('osg_singout_notifier_next_execution');
        $next_exec = (int)variable_get('osg_singout_notifier_next_execution', 0);
        if (time() >= $next_exec)
        {
            $delivery_window['start'] = strtotime(date('Y-d-m') . ' ' .
                variable_get('osg_singout_delivery_window_start', '12:01 AM'));
            $delivery_window['end'] = strtotime(date('Y-d-m') . ' ' .
                variable_get('osg_singout_delivery_window_end', '11:59 PM'));

            while ($delivery_window['end'] <= $delivery_window['start'])
            {
                $delivery_window['end'] = $delivery_window['end'] + 86400;
            }
            if ($delivery_window['end'] <= $delivery_window['start'])
            {
                $delivery_window['end'];
            }

            if (time() >= $delivery_window['start'])
            {
                if (time() <= $delivery_window['end'])
                {
                    osg_singout_notifier_registration_needed();
                    variable_set('osg_singout_notifier_next_execution', time() +
                        $interval);
                }
            }


        }
        else
        {
            $message = 'Next execution ' . $next_exec . ' Time Now ' . time() .
                ' ' . (string )($next_exec - time());
            //  debug($message);

        }
    }
}

/**
 * The form to provide a link to cron.php.
 */
function osg_singout_notifier_config_form($form, &$form_state)
{
    global $user;
    $cron_safe_threshold = variable_get('cron_safe_threshold', 999);
    $blurb = "";
    $interval = variable_get('osg_singout_notifier_interval', 60 * 60);
    if ($cron_safe_threshold == 0)
    {
        $blurb = "Cron is not running.";
    }
    else
    {
        if ($interval > 0)
        {

            $next_cron_time = variable_get('cron_last', time()) + $cron_safe_threshold;

            $show_time = variable_get('osg_singout_notifier_next_execution',
                time());
            if ($show_time < $next_cron_time)
            {
                $show_time = $next_cron_time;
            }
            $elap = $show_time - time();
            $blurb =
                'STS singout non-respondant notifier cron job will execute at ' .
                date("Y-m-d H:i:s", $show_time);
            if ($elap > 0)
            {
                $blurb = $blurb . ' or in ' . $elap . ' seconds.';
            }
            else
            {
                $blurb = 'Will execute the next time cron runs.';
            }
        }
    }
    $form['exection_time'] = array(
        '#type' => 'markup',
        '#markup' => "<p>$blurb</p>",
        );
    $val = 3600;
    $min = variable_get('cron_safe_threshold', 0);

    $options = osg_api_time_dropdown(array(
        'control' => 'minutes|15|300|15;hours|1|48|3;day;week|1|2',
        'zero_label' => 'Never',
        'cron_save' => true));
    //$options = osg_api_time_dropdown();
    //$options = array_merge(array(0 => t('Never')),$options);
    //debug($options);
    $form['osg_singout_notifier_interval'] = array(
        '#type' => 'select',
        '#title' => t('Cron interval'),
        '#description' => t('Time after which osg_singout_notifier_cron will respond to a processing request.'),
        '#default_value' => $interval,
        '#options' => $options,
        '#disabled' => ($cron_safe_threshold == 0),
        );


    $options[0] = 'No Delay';
    $form['osg_singout_notifier_renotify'] = array(
        '#type' => 'select',
        '#title' => t('Renotify interval'),
        '#description' => t('Time after which osg_singout_notifier_cron will resend message.'),
        '#default_value' => variable_get('osg_singout_notifier_renotify', 60 *
            60),
        '#options' => $options,

        );
    $options = osg_api_time_dropdown(array(
        'control' => 'days|30|180|15;week|1|26',
        'zero_label' => 'Never',
        'cron_safe' => true));
    $form['osg_singout_notifier_nag_boundary'] = array(
        '#type' => 'select',
        '#title' => t('Nag boundary'),
        '#description' => t('Time before event when notificatins will begin.'),
        '#default_value' => variable_get('osg_singout_notifier_nag_boundary',
            86400 * 30),
        '#options' => $options,

        );
    /*
    $form['osg_singout_notifier_sender'] = array(
    '#type'             => 'textfield',
    '#title'            => t('Default Sender'),
    '#autocomplete_path'=> 'osg/singout/sync/user/autocomplete',
    '#default_value'    => variable_get('osg_singout_notifier_sender'),
    '#description'      => t('Notification email sender.'),
    '#size'             => 30,
    );
    */
    $form['osg_singout_delivery_window'] = array(
        '#type' => 'fieldset',
        '#title' => t('Delivery Window'),
        );

    $t = date("Z");
    while ($t < 0)
    {
        $t = -$t;
    }
    $options = array();
    for ($i = 0; $i < (24 * 4); $i++)
    {
        $value = date('h:i A', $t);
        $options[$value] = $value;
        $t += 900;
    }
    $form['delivery_window']['osg_singout_delivery_window_start'] = array(
        '#type' => 'select',
        '#title' => t('Start Time'),
        '#description' => t('Do not deliver before this time.'),
        '#options' => $options,
        '#default_value' => variable_get('osg_singout_delivery_window_start',
            '12:01 AM'),
        );
    $form['delivery_window']['osg_singout_delivery_window_end'] = array(
        '#type' => 'select',
        '#title' => t('End Time'),
        '#description' => t('Do not deliver after this time.'),
        '#options' => $options,
        '#default_value' => variable_get('osg_singout_delivery_window_end',
            '11:59 PM'),
        );

    $default = variable_get('osg_singout_notifier_bcc');
    if (is_array($default))
    {
        implode(',', $default);
    }
    $form['osg_singout_notifier_bcc'] = array(
        '#type' => 'textfield',
        '#title' => t('BCC'),
        '#default_value' => $default,
        '#description' => t('Blind Carbon Copy Recipient'),
        '#size' => 30,
        );

    $form['osg_singout_notifier_test_mode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Test Mode'),
        '#description' => t('Test mode will send only one email to designated recipient.'),
        '#default_value' => variable_get('osg_singout_notifier_test_mode'),
        );

    $form['osg_singout_notifier_test_recipient'] = array(
        '#type' => 'textfield',
        '#title' => t('Test email recipients'),
        '#default_value' => implode(',', variable_get('osg_singout_notifier_test_recipient',
            array($user->mail))),
        '#description' => t('Comma seperated list of test Notification recipients.'),
        '#size' => 120,
        '#states' => array('visible' => array(':input[name="osg_singout_notifier_test_mode"]' =>
                    array('checked' => true), ), ),
        );
    $form['osg_singout_notifier_send_now'] = array(
        '#type' => 'submit',
        '#value' => t('Send Notification Now'),
        '#weight' => 50,
        '#submit' => array('osg_singout_notifier_send_now'),
        );
    $form['#validate'][] = 'osg_singout_notifier_config_expand_email_fields';
    $form['#submit'][] = 'osg_singout_notifier_reset_next_cron_interval';

    //$form['configuration'][]['#submit'][] = 'osg_singout_notifier_form_submit';
    //$form['#submit'][] = 'osg_singout_notifier_registration_needed';

    return system_settings_form($form);
}
function osg_singout_notifier_log($record, $key)
{
    $fields = array();
    $fields['uid'] = $record['uid'];
    $fields['nid'] = $record['nid'];
    $fields['delta'] = $key;

    $fields['notification_time'] = time();

    /* $id = db_insert('osg_singout_notifier_log')
    ->fields($fields)
    ->execute();*/
    /*
    db_merge('example')
    ->key(array('name'=> $name))
    ->fields(array(
    'field1'=> $value1,
    'field2'=> $value2,
    ))
    ->expression('field1', 'field1 + :inc', array(':inc'=> 1))
    ->execute();
    */
    $now = time();
    db_merge('osg_singout_notifier_journal')->key(array(
        'uid' => $record['uid'],
        'nid' => $record['nid'],
        'delta' => $key,
        'email' => $record['mail'],
        ))->insertFields(array(
        'uid' => $record['uid'],
        'nid' => $record['nid'],
        'delta' => $key,
        'initial_notification_time' => $now,
        'notification_count' => 1,
        'email' => $record['mail'],
        ))->updateFields(array('last_notification_time' => $now, ))->expression('notification_count',
        'notification_count + :inc', array(':inc' => 1))->execute();

}
function _get_test_status()
{
    global $user;
    $status = (bool)variable_get('osg_singout_notifier_test_mode', false);
    if ($status)
    {
        $status = array();
        $status['test_mode'] = true;
        $status['recipient'] = variable_get('osg_singout_notifier_test_recipient',
            $user->mail);
        $status['item count'] = variable_get('osg_singout_notifier_test_email_count',
            32767);
    }
    return $status;
}
function osg_singout_notifier_config_expand_email_fields($form, &$form_state)
{
    $emails = osg_singout_notifier_explode_emails($form_state['values']['osg_singout_notifier_test_recipient']);
    form_set_value($form['osg_singout_notifier_test_recipient'], $emails, $form_state);

    $emails = osg_singout_notifier_explode_emails($form_state['values']['osg_singout_notifier_bcc']);
    form_set_value($form['osg_singout_notifier_bcc'], $emails, $form_state);
}
function osg_singout_notifier_explode_emails($emails)
{
    $emails = str_replace(';', ',', $emails);
    $emails = str_replace('|', ',', $emails);
    $emails = explode(',', $emails);
    return $emails;
}
function osg_singout_notifier_reset_next_cron_interval($form, &$form_state)
{
    variable_set('osg_singout_notifier_next_execution', time() + $form_state['values']['osg_singout_notifier_interval']);

}
function osg_singout_notifier_permission()
{
    return array('send singout notifications' => array(
            'title' => t('Send Singout Nofifications'),
            'description' => t('Send notifications about singout registration to users.'),
            ), );


}

function osg_singout_notifier_user_access($user)
{
    if (user_permission('send singout notifications'))
    {
        $sql = "SELECT COUNT(* ) AS unregistered ";
        $sql = $sql . "FROM osg_ical_imported a ";
        $sql = $sql . "LEFT JOIN registration r ";
        $sql = $sql . "ON a.nid = r.entity_id ";
        $sql = $sql . "AND a.available = 1 ";
        $sql = $sql . "AND r.entity_type = 'node' ";
        $sql = $sql . "AND r.user_uid = " . $user->uid . " ";
        $sql = $sql . "WHERE r.registration_id IS NULL ";
        $result = (bool)db_query($sql)->fetchField();

        //I don't want this to show up.  Ever
        //return $result;

    }
}
