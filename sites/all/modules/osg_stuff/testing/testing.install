<?php

/**
* @file
* Install, update and uninstall functions for the testing module.
*/


/**
* Implements hook_install().
*/
function testing_install()
{


  // drupal_set_message('testing_install');


}


/**
* Implements hook_uninstall().
*/
function testing_uninstall()
{


  // drupal_set_message('testing_uninstall');


}

/**
*
* Implements hook_schema()
*
* Define the current version of the database schema.
*
* A Drupal schema definition is an array structure representing one or
* more tables and their related keys and indexes. A schema is defined by
* hook_schema() which must live in your module's .install file.
*
* This hook is called at install and uninstall time, and in the latter
* case, it cannot rely on the .module file being loaded or hooks being known.
* If the .module file is needed, it may be loaded with drupal_load().
*
* The tables declared by this hook will be automatically created when
* the module is first enabled, and removed when the module is uninstalled.
* This happens before hook_install() is invoked, and after hook_uninstall()
* is invoked, respectively.
*
* By declaring the tables used by your module via an implementation of
* hook_schema(), these tables will be available on all supported database
* engines. You don't have to deal with the different SQL dialects for table
* creation and alteration of the supported database engines.
*
* See the Schema API Handbook at http://drupal.org/node/146843 for
* details on schema definition structures.
*
* @return
* A schema definition structure array. For each element of the
* array, the key is a table name and the value is a table structure
* definition.
*
* @ingroup schemaapi
*/

function testing_schema()
{
}
/**
* Does some update type shit
* 
* @return
*/
function testing_update_7001()
{

}